{"version":3,"sources":["index.js"],"names":["Square","props","className","onClick","style","isWinSquare","color","value","Board","i","key","this","squares","winLine","includes","board","boardRow","j","push","renderSquare","React","Component","Game","state","history","Array","fill","lastTurn","xIsNext","stepNumber","sortIsAscending","slice","length","calculateWinner","setState","concat","step","sortOrder","current","winner","Math","floor","round","status","moves","map","move","desc","jumpTo","fontWeight","reverse","Object","values","winResult","square","allVisited","handleClick","toggleSort","lines","a","b","c","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.bc38143f.chunk.js","sourcesContent":["import React from \"react\";\r\nimport ReactDOM, { render } from \"react-dom\";\r\nimport \"./index.css\";\r\n\r\nconst BOARD_SIZE = 3;\r\n\r\nfunction Square(props) {\r\n  return (\r\n    <button\r\n      className=\"square\"\r\n      onClick={props.onClick}\r\n      style={props.isWinSquare ? { color: \"red\" } : { color: \"black\" }}\r\n    >\r\n      {props.value}\r\n    </button>\r\n  );\r\n}\r\n\r\nclass Board extends React.Component {\r\n  renderSquare(i) {\r\n    return (\r\n      <Square\r\n        key={i}\r\n        value={this.props.squares[i]}\r\n        onClick={() => this.props.onClick(i)}\r\n        isWinSquare={\r\n          this.props.winLine\r\n            ? this.props.winLine.includes(i)\r\n              ? true\r\n              : false\r\n            : false\r\n        }\r\n      />\r\n    );\r\n  }\r\n  render() {\r\n    let board = [];\r\n    for (let i = 0; i < 3; i++) {\r\n      let boardRow = [];\r\n      for (let j = 0; j < 3; j++) {\r\n        boardRow.push(this.renderSquare(i * BOARD_SIZE + j));\r\n      }\r\n      board.push(\r\n        <div key={i} className=\"board-row\">\r\n          {boardRow}\r\n        </div>\r\n      );\r\n    }\r\n    return <div>{board}</div>;\r\n  }\r\n}\r\nclass Game extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      history: [\r\n        {\r\n          squares: Array(9).fill(null),\r\n          lastTurn: -1,\r\n        },\r\n      ],\r\n      xIsNext: true,\r\n      stepNumber: 0,\r\n      sortIsAscending: true,\r\n    };\r\n  }\r\n  handleClick(i) {\r\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\r\n    const current = history[history.length - 1];\r\n    const squares = current.squares.slice();\r\n    if (calculateWinner(squares) || squares[i]) {\r\n      return;\r\n    }\r\n    squares[i] = this.state.xIsNext ? \"X\" : \"O\";\r\n    this.setState({\r\n      history: history.concat([\r\n        {\r\n          squares: squares,\r\n          lastTurn: i,\r\n        },\r\n      ]),\r\n      stepNumber: history.length,\r\n      xIsNext: !this.state.xIsNext,\r\n    });\r\n  }\r\n  jumpTo(step) {\r\n    this.setState({\r\n      stepNumber: step,\r\n      xIsNext: step % 2 === 0,\r\n    });\r\n  }\r\n  toggleSort() {\r\n    let sortOrder = this.state.sortIsAscending;\r\n    this.setState({\r\n      sortIsAscending: !sortOrder,\r\n    });\r\n  }\r\n  render() {\r\n    const history = this.state.history;\r\n    const current = history[this.state.stepNumber];\r\n    const winner = calculateWinner(current.squares);\r\n    let winLine;\r\n    let position;\r\n    if (current.lastTurn === -1) {\r\n      position = \"\";\r\n    } else {\r\n      position =\r\n        \"(\" +\r\n        Math.floor(current.lastTurn / 3 + 1) +\r\n        \",\" +\r\n        Math.round((current.lastTurn % 3) + 1) +\r\n        \")\";\r\n    }\r\n\r\n    let moves = history.map((step, move) => {\r\n      const desc = move\r\n        ? \"Go to move #\" +\r\n          move +\r\n          \" \" +\r\n          \"(\" +\r\n          Math.floor(history[move].lastTurn / 3 + 1) +\r\n          \",\" +\r\n          Math.round((history[move].lastTurn % 3) + 1) +\r\n          \")\"\r\n        : \"Go to gamestart\";\r\n      return (\r\n        <li key={move}>\r\n          <button\r\n            onClick={() => this.jumpTo(move)}\r\n            style={\r\n              move === this.state.stepNumber\r\n                ? { fontWeight: \"bold\" }\r\n                : { fontWeight: \"normal\" }\r\n            }\r\n          >\r\n            {desc}\r\n          </button>\r\n        </li>\r\n      );\r\n    });\r\n    if (this.state.sortIsAscending) {\r\n      moves = moves.reverse();\r\n    }\r\n    let status;\r\n    if (winner) {\r\n      status = \"Winner: \" + winner.winner;\r\n      winLine = Object.values(winner.winResult);\r\n    } else {\r\n      status = \"Next player: \" + (this.state.xIsNext ? \"X\" : \"O\");\r\n    }\r\n    if (winner === null && allVisited(current.squares)) {\r\n      status = \"Draw\";\r\n    }\r\n    return (\r\n      <div className=\"game\">\r\n        <div className=\"game-board\">\r\n          <Board\r\n            squares={current.squares}\r\n            onClick={(i) => this.handleClick(i)}\r\n            winLine={winLine}\r\n          />\r\n        </div>\r\n        <div className=\"game-info\">\r\n          <div>{status}</div>\r\n          <button onClick={() => this.toggleSort()}>\r\n            {this.state.sortIsAscending\r\n              ? \"Ascending Moves\"\r\n              : \"Descending Moves\"}\r\n          </button>\r\n          <ol>{moves}</ol>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nfunction calculateWinner(squares) {\r\n  const lines = [\r\n    [0, 1, 2],\r\n    [3, 4, 5],\r\n    [6, 7, 8],\r\n    [0, 3, 6],\r\n    [1, 4, 7],\r\n    [2, 5, 8],\r\n    [0, 4, 8],\r\n    [2, 4, 6],\r\n  ];\r\n  for (let i = 0; i < lines.length; i++) {\r\n    const [a, b, c] = lines[i];\r\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n      return {\r\n        winner: squares[a],\r\n        winResult: [a, b, c],\r\n      };\r\n    }\r\n  }\r\n  return null;\r\n}\r\nfunction allVisited(square) {\r\n  let result = true;\r\n  for (let i = 0; i < square.length; i++) {\r\n    if (square[i] === null) {\r\n      return false;\r\n    }\r\n  }\r\n  return result;\r\n}\r\nReactDOM.render(<Game />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}